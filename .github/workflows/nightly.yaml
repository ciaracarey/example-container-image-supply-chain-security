on:  
  schedule:
    # Run this workflow every night at 5am UTC.
     - cron: "0 5 * * *"

jobs:
  scan_for_vulnerabilities:
    runs-on: ubuntu-latest
    container:
      image: docker.cloudsmith.io/cloudsmith/examples/example-ci:latest
    steps:
      - name: "login to Cloudsmith container registry" 
        run: |
          echo "${{ secrets.CLOUDSMITH_TOKEN }}" | docker login docker.cloudsmith.io -u ciara-carey --password-stdin

      - name: "retrieve SBOM from attestation in registry"
        env:
            COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}        
        run: |
          echo "${{ secrets.COSIGN_PUB }}" > ./cosign.pub
          
          IMAGE="docker.cloudsmith.io/cloudsmith/examples/test-image:latest"
          # Retrieve the attestation for this image. If the attestation has been tampered with, this command will fail. (This is a good thing! We don't want to scan for vulnerabilities using a faulty SBOM.)
          cosign verify-attestation --key ./cosign.pub $IMAGE > ./attestation_output

          # Isolate the Syft SBOM from the rest of the attestation
          cat ./attestation_output | jq --slurp --compact-output 'map(.payload | @base64d | fromjson | .predicate.Data | fromjson | select(.descriptor.name == "syft")) | first' > ./sbom.syft.json

      - name: "scan for vulnerabilities"
        env: 
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          # Fail the pipeline if we detect vulnerabilities above a certain severity threshold. For this example, we will use severity Critical.
          grype sbom:./sbom.syft.json -o json -f Critical
      - name: Quarantine image if critical vulnerabilities exist
        if: failure()
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          SLUG=$(cloudsmith list packages cloudsmith/examples -q "format:docker AND name:test-image AND tag:latest" -F pretty_json | jq -r ".data[].slug_perm")
          cloudsmith quarantine add cloudsmith/examples/$SLUG
          
