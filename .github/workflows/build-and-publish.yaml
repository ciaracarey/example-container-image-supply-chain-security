on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build_image:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/luhring/example-ci:latest
    steps:
      - uses: actions/checkout@v2

      - name: "build and push the image"
        run: |
          IMAGE_TAG="ghcr.io/luhring/example:git-$GITHUB_SHA"
          docker build -t "$IMAGE_TAG" .

          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u luhring --password-stdin
          docker push "$IMAGE_TAG"

  sign_image:
    needs: build_image
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/luhring/example-ci:latest
    steps:
      - name: "sign the image"
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u luhring --password-stdin
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key
          cosign sign -key ./cosign.key "ghcr.io/luhring/example:git-$GITHUB_SHA"

  create_image_sbom:
    needs: build_image
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/luhring/example-ci:latest
    steps:
      - name: "create the SBOM"
        run: |
          IMAGE_TAG="ghcr.io/luhring/example:git-$GITHUB_SHA"
          syft "registry:$IMAGE_TAG" -o json | jq -c > ./sbom.syft.json

      - uses: actions/upload-artifact@v2
        with:
          name: sbom.syft.json
          path: ./sbom.syft.json

  scan_for_vulnerabilities:
    needs: create_image_sbom
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/luhring/example-ci:latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: sbom.syft.json

      - name: "scan for vulnerabilities"
        # Normally, we'd fail the pipeline if we detected vulnerabilities above a threshold. For this example, we won't.
        run: |
          grype sbom:./sbom.syft.json -o json | jq -c > ./vulnerability-scan.grype.json

      - uses: actions/upload-artifact@v2
        with:
          name: vulnerability-scan.grype.json
          path: ./vulnerability-scan.grype.json

  create_sbom_attestation:
    needs: create_image_sbom
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/luhring/example-ci:latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: sbom.syft.json

      - name: "attest the sbom"
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u luhring --password-stdin
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key

          SBOM_FILE="./sbom.syft.json"
          IMAGE_TAG="ghcr.io/luhring/example:git-$GITHUB_SHA"

          cosign attest -predicate "$SBOM_FILE" -key ./cosign.key "$IMAGE_TAG"

  create_vulnerability_scan_attestation:
    needs: scan_for_vulnerabilities
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/luhring/example-ci:latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: vulnerability-scan.grype.json

      - name: "attest the vulnerability scan"
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u luhring --password-stdin
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key

          VULNERABILITY_SCAN_FILE="./vulnerability-scan.grype.json"
          IMAGE_TAG="ghcr.io/luhring/example:git-$GITHUB_SHA"

          cosign attest -predicate "$VULNERABILITY_SCAN_FILE" -key ./cosign.key "$IMAGE_TAG"
